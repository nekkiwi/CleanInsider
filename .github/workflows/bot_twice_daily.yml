name: Insider Bot Twice Daily

on:
  schedule:
    # Germany: run ~1 hour after US market open (approx 15:30 UTC summer / 14:30 UTC winter)
    # and ~1 hour before close (approx 20:00 UTC). Adjust as needed.
    - cron: '30 15 * * 1-5'
    - cron: '0 20 * * 1-5'
  workflow_dispatch:
    inputs:
      timepoint:
        description: Time horizon (e.g., 1w)
        required: false
        default: '1w'
      tp:
        description: Take-profit (e.g., 0.10)
        required: false
        default: '0.10'
      sl:
        description: Stop-loss (e.g., -0.10)
        required: false
        default: '-0.10'
      threshold:
        description: Label threshold percent (e.g., 1)
        required: false
        default: '1'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alpaca-trade-api==3.2.0 --no-deps

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Download models from Google Drive
        env:
          # This configures rclone to access Google Drive using your service account
          RCLONE_CONFIG_GDRIVE_TYPE: drive
          RCLONE_CONFIG_GDRIVE_SCOPE: drive.readonly
          RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SHEET_CREDS_JSON }}
        run: |
          # Set default parameters or use workflow_dispatch inputs
          TIMEPOINT='1w'
          TP='0.10'
          SL='-0.10'
          THRESHOLD_PCT='1'
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TIMEPOINT='${{ inputs.timepoint }}'
            TP='${{ inputs.tp }}'
            SL='${{ inputs.sl }}'
            THRESHOLD_PCT='${{ inputs.threshold }}'
          fi
          
          # Construct the subfolder name from the parameters
          TP_CLEAN=$(echo "$TP" | sed 's/\.//g' | sed 's/^/TP/' | sed 's/-//')
          SL_CLEAN=$(echo "$SL" | sed 's/\.//g' | sed 's/^/SL/')
          SUBFOLDER_NAME="LightGBM_alpha_${TIMEPOINT}_${TP_CLEAN}_${SL_CLEAN}_${THRESHOLD_PCT}pct"
          echo "Downloading models for: ${SUBFOLDER_NAME}"

          # Create the local target directories
          mkdir -p "data/models"
          mkdir -p "data/scrapers/features/preprocessing"

          # Download models from the subfolder (preserves seed directory structure)
          rclone copy "gdrive,root_folder_id=${{ secrets.GDRIVE_FOLDER_ID }}:${SUBFOLDER_NAME}/models/" "data/models/" --progress
          
          # Download preprocessing artifacts directly (no subdirectories)
          rclone copy "gdrive,root_folder_id=${{ secrets.GDRIVE_FOLDER_ID }}:${SUBFOLDER_NAME}/preprocessing/" "data/scrapers/features/preprocessing/" --progress
          
          echo "Model download complete."
          echo "Downloaded files:"
          find data/models/${SUBFOLDER_NAME} -type f | head -10
          find data/scrapers/features/preprocessing -type f | head -5

      - name: Configure environment
        env:
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_API_SECRET_KEY: ${{ secrets.ALPACA_API_SECRET_KEY }}
          GOOGLE_SHEET_CREDS_JSON: ${{ secrets.GOOGLE_SHEET_CREDS_JSON }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SHEET_GID: ${{ secrets.GOOGLE_SHEET_GID }}
        run: |
          echo "ALPACA_API_KEY set: ${#ALPACA_API_KEY} chars"
          echo "Google creds present: ${{ env.GOOGLE_SHEET_CREDS_JSON != '' }}"

      - name: Run bot (workflow_dispatch overrides, else defaults)
        run: |
          TIMEPOINT='1w'
          TP='0.10'
          SL='-0.10'
          THRESHOLD='1'
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TIMEPOINT='${{ inputs.timepoint }}'
            TP='${{ inputs.tp }}'
            SL='${{ inputs.sl }}'
            THRESHOLD='${{ inputs.threshold }}'
          fi
          echo "Args: $TIMEPOINT $TP $SL thr=$THRESHOLD"
          python run_bot.py --timepoint "$TIMEPOINT" --tp "$TP" --sl "$SL" --threshold_pct "$THRESHOLD"

      - name: Upload signals
        uses: actions/upload-artifact@v4
        with:
          name: signals
          path: results/bot/*.parquet


